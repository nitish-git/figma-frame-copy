import React, { useState } from "react";

const FigmaFrameFetcher = ({
  figmaFileKey,
  frameId,
  personalAccessToken,
}: {
  figmaFileKey: string;
  frameId: string;
  personalAccessToken: string;
}) => {
  const [status, setStatus] = useState("idle");
  const [error, setError] = useState(null);

  const fetchAndCopyFigmaFrame = async () => {
    try {
      setStatus("loading");
      setError(null);

      // Fetch the frame data from Figma API
      const response = await fetch(
        `https://api.figma.com/v1/files/${figmaFileKey}/nodes?ids=${frameId}`,
        {
          headers: {
            "X-Figma-Token": personalAccessToken,
          },
        }
      );

      if (!response.ok) {
        throw new Error(
          `Failed to fetch: ${response.status} ${response.statusText}`
        );
      }

      const data = await response.json();

      // Get the frame node
      const frameNode = data.nodes[frameId].document;

      if (!frameNode) {
        throw new Error("Frame not found");
      }

      // Format the data as JSON - Figma can paste JSON data and convert it back to Figma objects
      // Remove unnecessary metadata that might interfere with pasting
      const cleanedFrameData = cleanNodeForCopy(frameNode);

      // Convert to JSON string
      const jsonString = JSON.stringify(cleanedFrameData);

      // Copy to clipboard
      await navigator.clipboard.writeText(jsonString);

      setStatus("success");
      setTimeout(() => setStatus("idle"), 3000);
    } catch (err: any) {
      console.error("Error fetching Figma data:", err);
      setError(err.message);
      setStatus("error");
    }
  };

  // Helper function to clean up node data for copying
  const cleanNodeForCopy = (node: any) => {
    // Create a deep copy to avoid modifying the original
    const nodeCopy = JSON.parse(JSON.stringify(node));

    // Remove properties that should be regenerated by Figma
    delete nodeCopy.id;
    delete nodeCopy.key;

    // Clean children recursively
    if (nodeCopy.children && Array.isArray(nodeCopy.children)) {
      nodeCopy.children = nodeCopy.children.map((child: any) =>
        cleanNodeForCopy(child)
      );
    }

    return nodeCopy;
  };

  return (
    <div className="flex flex-col items-center">
      <button
        onClick={fetchAndCopyFigmaFrame}
        disabled={status === "loading"}
        className={`px-4 py-2 rounded-md font-medium transition-colors ${
          status === "loading"
            ? "bg-gray-300 cursor-not-allowed"
            : status === "success"
            ? "bg-green-500 text-white hover:bg-green-600"
            : status === "error"
            ? "bg-red-500 text-white hover:bg-red-600"
            : "bg-blue-500 text-white hover:bg-blue-600"
        }`}
      >
        {status === "loading"
          ? "Fetching..."
          : status === "success"
          ? "Copied to clipboard!"
          : status === "error"
          ? "Error! Try again"
          : "Copy Figma Frame Data"}
      </button>

      {error && <div className="mt-2 text-red-500 text-sm">Error: {error}</div>}

      {status === "success" && (
        <div className="mt-2 text-green-600 text-sm">
          Frame data copied! You can now paste it in Figma.
        </div>
      )}

      <div className="mt-4 p-4 bg-gray-100 rounded-md max-w-md text-sm">
        <h3 className="font-medium mb-2">Instructions:</h3>
        <ol className="list-decimal pl-5 space-y-1">
          <li>Click the button above to fetch and copy the frame data</li>
          <li>Open Figma and create a new frame or select an existing frame</li>
          <li>Press Ctrl+V (or Cmd+V on Mac) to paste the data</li>
          <li>
            Figma will convert the JSON data back into editable Figma objects
          </li>
        </ol>
      </div>
    </div>
  );
};

// Example usage component
const FigmaFrameExample = () => {
  const [figmaFileKey, setFigmaFileKey] = useState("");
  const [frameId, setFrameId] = useState("");
  const [personalAccessToken, setPersonalAccessToken] = useState("");
  const [showFetcher, setShowFetcher] = useState(false);

  const handleSubmit = (e: any) => {
    e.preventDefault();
    setShowFetcher(true);
  };

  return (
    <div className="p-6 max-w-md mx-auto">
      <h1 className="text-xl font-bold mb-4">Figma Frame Data Fetcher</h1>

      {!showFetcher ? (
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label className="block text-sm font-medium mb-1">
              Figma File Key:
              <input
                type="text"
                value={figmaFileKey}
                onChange={(e) => setFigmaFileKey(e.target.value)}
                placeholder="abcDEF123456"
                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md"
                required
              />
            </label>
            <p className="text-xs text-gray-500 mt-1">
              From your Figma file URL: figma.com/file/<strong>fileKey</strong>
              /...
            </p>
          </div>

          <div>
            <label className="block text-sm font-medium mb-1">
              Frame ID:
              <input
                type="text"
                value={frameId}
                onChange={(e) => setFrameId(e.target.value)}
                placeholder="1:234"
                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md"
                required
              />
            </label>
            <p className="text-xs text-gray-500 mt-1">
              Right-click on a frame in Figma and select "Copy/Paste as" → "Copy
              link" and extract the ID after the "node-id=" parameter
            </p>
          </div>

          <div>
            <label className="block text-sm font-medium mb-1">
              Personal Access Token:
              <input
                type="password"
                value={personalAccessToken}
                onChange={(e) => setPersonalAccessToken(e.target.value)}
                placeholder="figd_..."
                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md"
                required
              />
            </label>
            <p className="text-xs text-gray-500 mt-1">
              Generate from your Figma account settings → Personal access tokens
            </p>
          </div>

          <button
            type="submit"
            className="w-full px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors"
          >
            Continue
          </button>
        </form>
      ) : (
        <>
          <FigmaFrameFetcher
            figmaFileKey={figmaFileKey}
            frameId={frameId}
            personalAccessToken={personalAccessToken}
          />
          <button
            onClick={() => setShowFetcher(false)}
            className="mt-4 text-blue-500 hover:underline"
          >
            ← Back to settings
          </button>
        </>
      )}
    </div>
  );
};

export default FigmaFrameExample;
